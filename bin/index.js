const meow = require('meow');
const wa = require('../dist');
// const wa = require('@open-wa/wa-automate');
const { create, SimpleListener, generatePostmanJson } = wa;
const path = require('path');
const express = require('express');
const app = express();
const fs = require('fs');
const uuidAPIKey = require('uuid-apikey');
const p2s = require('postman-2-swagger');
const swaggerUi = require('swagger-ui-express');

const extraFlags = {};
const configWithCases = require('./config-schema.json');

configWithCases.map(({ type, key }) => {
	if (key === "popup") type = "number"; extraFlags[key] = {
		type
	}
});
const configParamText = configWithCases.map(o => `      --${o.p}\t\t${o.p.length < 14 ? `\t` : ``}${o.p.length < 6 ? `\t` : ``}${o.description}`).join("\n")

const cli = meow(`
	Usage
	  $ @open-wa/wa-automate

	Options
      --no-api, -n \t\t\tDon't expose the api. This may be useful if you just want to set the webhooks
      --port, -p \t\t\tSet the port for the api. Default to 8002
	  --host, -h \t\t\tSet the hostname for the service. Default: localhost
      --webhook, -w \t\t\twebhook to use for the listeners
      --key, k \t\t\tspecify an api key to use as a check for all requests. If you add -k by itself, a key will be autogenerated for you.
      --config, -c \t\t\tThe relative json file that contains the config. By default the system will look for config.json which will override any config variables set. Default: './config.json'
      --session, -s \t\t\tA properly escaped string of the session.data.json file.
      --keep-alive, -a \t\tIf set, the system will force the session to refocus in this process. This will prevent you from opening a whatsapp session anywhere else.
      --use-session-id-in-path, -i \tIf set, all API paths will include the session id. default to false and the default session Id is 'session'.
      --generate-api-docs, -d \t\tGenerate postman collection and expose api docs to open in browser.
      --license, -l \t\t\tThe license key you want to use for this server. License keys are used to unlock features. Learn more here https://github.com/open-wa/wa-automate-nodejs#license-key
${configParamText}

	Please check here for more information on some of the above mentioned parameters: https://open-wa.github.io/wa-automate-nodejs/interfaces/configobject.html

	Examples
	  $ open-wa -p 8080 --disable-spins -a
	  
`, {
	flags: {
		port: {
			type: 'number',
			alias: 'p',
			default: 8002
		},
		host: {
			type: 'string',
			alias: 'h',
			default: 'localhost'
		},
		webhook: {
			type: 'string',
			alias: 'w'
		},
		key: {
			type: 'string',
			alias: 'k'
		},
		config: {
			type: 'string',
			alias: 'w'
		},
		session: {
			type: 'string',
			alias: 's'
		},
		noApi: {
			type: 'boolean',
			alias: 'n',
			default: false
		},
		licenseKey: {
			type: 'string',
			alias: 'l'
		},
		keepAlive: {
			type: 'boolean',
			alias: 'a'
		},
		useSessionIdInPath: {
			type: 'boolean',
			alias: 'i'
		},
		generateApiDocs: {
			type: 'boolean',
			alias: 'd',
			default: true
		},
		...extraFlags
	},
	booleanDefault: undefined
});

app.use(express.json({ limit: '200mb' })) //add the limit option so we can send base64 data through the api
const c = cli.flags;
const PORT = c.port;
let config = {};
if (c && c.config) {
	//get the config file
	const configJsonPath = path.join(path.resolve(process.cwd()), c.config || `config.json`);
	if (fs.existsSync(configJsonPath)) {
		try {
			config = JSON.parse(fs.readFileSync(configJsonPath));
		} catch (error) {
			throw `Unable to parse config file as JSON. Please make sure ${configJsonPath} is a valid JSON config file`;
		}
	} else throw `config not found at ${configJsonPath}`;
} else {
	config = {
		...c
	};
}

if (c && c.session) {
	try {
		let sessionData = JSON.parse(fs.readFileSync(c.session));
	} catch (error) {
		throw `Unable to parse session data string as JSON`;
	}
}

if (c && c.licenseKey) {
	config = {
		...config,
		licenseKey: c.licenseKey
	}
}

if (!(c.key == null) && c.key == "") {
	//generate the key
	c.key = uuidAPIKey.create().apiKey;
}

create({ ...config })
	.then(async (client) => {
		if (c && c.webhook) Object.keys(SimpleListener).map(eventKey => client.registerWebhook(SimpleListener[eventKey], c.webhook))

		if(c && c.keepAlive) client.onStateChanged(state=>{
			if(state==="CONFLICT" || state==="UNLAUNCHED") client.forceRefocus();
		  });

		if (!(c && c.noApi)) {
			if(c && c.key) {
				console.log(`Please use the following api key for requests as a header:\nkey: ${c.key}`)
				app.use((req, res, next) => {
					const apiKey = req.get('key')
					if (!apiKey || apiKey !== c.key) {
					  res.status(401).json({error: 'unauthorised'})
					} else {
					  next()
					}
				  })
			}

			if(c && c.generateApiDocs) {
				console.log('Generating API Docs');
				const postmanCollection = await generatePostmanJson({
					...c,
					...config
				});
				console.log('Postman collection generated: open-wa.postman_collection.json');
				const swCol = p2s.default(postmanCollection);
				/**
				 * Fix swagger docs by removing the content type as a required paramater
				 */
				Object.keys(swCol.paths).forEach(p => {
					let path = swCol.paths[p].post;
					let index = [...path.parameters].findIndex(({name})=>name=="Content-Type");
					if(index > -1) path.parameters.splice(index, 1);
				});
				app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swCol));
			}
			
			app.use(client.middleware((c && c.useSessionIdInPath)));
			app.listen(PORT, () => console.log(`\nâ€¢ Listening on port ${PORT}!`));
			
			if(c && c.generateApiDocs)  console.log(`Check out the API docs here: ${c.host.includes('http') ? '' : 'http://'}${c.host}:${PORT}/api-docs`)

		}
	})
	.catch(e => console.log('Error', e.message));